name: VPS

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # Every 6 hours

jobs:
  vps:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    steps:
      - name: Pre-run setup and install tools
        run: |
          sudo apt update && sudo apt install -y git nano htop python3 python3-pip neofetch curl
          echo "Tools installed: git, nano, htop, python3, pip, neofetch"

      - name: Setup and start tmate
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: false

      - name: Notify Telegram (VPS Ready)
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          TMATE_URL=$(tmate show-messages | grep -m1 'ssh ')
          WEB_URL=$(tmate show-messages | grep -m1 'https://')
          MSG="‚úÖ VPS is ready!\n\nüîó SSH: \`$TMATE_URL\`\nüåê Web: $WEB_URL\n\nüß† Tools: git, nano, htop, python3, pip, neofetch"
          curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id=$CHAT_ID \
            -d text="$MSG" \
            -d parse_mode=Markdown

      - name: Restore backup from Telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          mkdir -p /home/runner/data-to-backup
          curl -s -o /tmp/backup.tar.gz "https://api.telegram.org/file/bot${BOT_TOKEN}/$(curl -s https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=$(curl -s https://api.telegram.org/bot${BOT_TOKEN}/getUpdates | jq -r '.result[-1].message.document.file_id') | jq -r '.result.file_path')"
          tar -xzf /tmp/backup.tar.gz -C /home/runner/data-to-backup || echo "No previous backup."

      - name: Backup to Telegram before shutdown
        if: always()
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          tar -czf /tmp/data.tar.gz -C /home/runner/data-to-backup .
          curl -s -F chat_id=$CHAT_ID -F document=@/tmp/data.tar.gz https://api.telegram.org/bot$BOT_TOKEN/sendDocument

      - name: Notify Telegram (Backup Done)
        if: always()
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          curl -s -X POST https://api.telegram.org/bot$BOT_TOKEN/sendMessage \
            -d chat_id=$CHAT_ID \
            -d text="üì¶ Backup complete. VPS will shut down." \
            -d parse_mode=Markdown
