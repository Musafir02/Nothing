name: VPS with SSHx + Telegram Bot

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  vps:
    runs-on: ubuntu-latest

    steps:
    - name: Setup & install tools
      run: |
        sudo apt update && sudo apt install -y git nano htop python3 pip neofetch curl
        mkdir -p $HOME/data-to-backup
        mkdir -p $HOME/bot

    - name: Start SSHx
      run: |
        curl -sSf https://sshx.io/get | sh -s run > $HOME/bot/session.txt &
        sleep 10
        cat $HOME/bot/session.txt

    - name: Extract SSHx info & send to Telegram
      env:
        TELEGRAM_TOKEN: ${{ secrets.BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.CHAT_ID }}
      run: |
        LINK=$(grep -o 'https://sshx.io/[a-zA-Z0-9]*' $HOME/bot/session.txt | head -n1)
        SSH_CMD=$(grep -o 'ssh [^ ]*@[a-zA-Z0-9.]*' $HOME/bot/session.txt | head -n1)
        MSG=$(echo -e "âœ… *VPS is Ready!*\nðŸ”— [Web Access]($LINK)\nðŸ’» \`$SSH_CMD\`\nðŸ—‚ Folder: \$HOME/data-to-backup\nðŸ”§ Tools: git, nano, htop, python3, pip, neofetch")
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
          -d chat_id=$TELEGRAM_CHAT_ID \
          -d text="$MSG" \
          -d parse_mode="Markdown"

    - name: Create Telegram bot script
      run: |
        cat > $HOME/bot/bot.py <<EOF
import os, time, requests

TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
API = f"https://api.telegram.org/bot{TOKEN}"
OFFSET = None

while True:
    res = requests.get(f"{API}/getUpdates", params={"offset": OFFSET}).json()
    for update in res.get("result", []):
        OFFSET = update["update_id"] + 1
        msg = update.get("message", {})
        text = msg.get("text", "").lower()
        file_id = msg.get("document", {}).get("file_id")
        if text == "/backup":
            os.system("tar -czf /tmp/data.tar.gz -C $HOME/data-to-backup .")
            with open("/tmp/data.tar.gz", "rb") as f:
                requests.post(f"{API}/sendDocument", data={"chat_id": CHAT_ID}, files={"document": f})
        elif text == "/restore":
            try:
                with open(f"{os.getenv('HOME')}/bot/file_id.txt") as f:
                    fid = f.read().strip()
                getfile = requests.get(f"{API}/getFile", params={"file_id": fid}).json()
                url = f"https://api.telegram.org/file/bot{TOKEN}/{getfile['result']['file_path']}"
                os.system(f"curl -s -o /tmp/data.tar.gz {url} && tar -xzf /tmp/data.tar.gz -C $HOME/data-to-backup")
            except: pass
        elif file_id:
            with open(f"{os.getenv('HOME')}/bot/file_id.txt", "w") as f:
                f.write(file_id)
    time.sleep(5)
EOF

    - name: Run Telegram bot and wait
      env:
        TELEGRAM_TOKEN: ${{ secrets.BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.CHAT_ID }}
      run: |
        nohup python3 $HOME/bot/bot.py > $HOME/bot/log.txt 2>&1 &
        sleep 21000  # ~5.8 hrs

    - name: Auto-backup before shutdown
      if: always()
      env:
        TELEGRAM_TOKEN: ${{ secrets.BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.CHAT_ID }}
      run: |
        tar -czf /tmp/data.tar.gz -C $HOME/data-to-backup . || echo "No backup"
        curl -F document=@/tmp/data.tar.gz \
          "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendDocument?chat_id=$TELEGRAM_CHAT_ID&caption=ðŸ“¦ Auto Backup"

    - name: Notify Telegram (Shutdown)
      if: always()
      env:
        TELEGRAM_TOKEN: ${{ secrets.BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.CHAT_ID }}
      run: |
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
          -d chat_id="$TELEGRAM_CHAT_ID" \
          -d text="ðŸš« VPS session ended. Auto-shutdown completed."
