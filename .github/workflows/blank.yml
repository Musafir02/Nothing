name: VPS

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Set up environment
      run: |
        sudo apt update && sudo apt install -y git nano htop python3 python3-pip neofetch curl wget tar unzip

    - name: Install Cloudflare Tunnel
      run: |
        curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
        chmod +x cloudflared
        sudo mv cloudflared /usr/local/bin/

    - name: Start Cloudflare Tunnel
      run: |
        mkdir -p ~/.cloudflared
        echo "tunnel: github-vps" > ~/.cloudflared/config.yml
        echo "credentials-file: /home/runner/.cloudflared/creds.json" >> ~/.cloudflared/config.yml
        curl -s -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
             -o /home/runner/.cloudflared/creds.json \
             https://your-endpoint/creds/github-vps.json
        cloudflared tunnel --config ~/.cloudflared/config.yml run &
        sleep 10

    - name: Print connection link
      run: echo "‚úÖ VPS started via Cloudflare Tunnel! Check your dashboard or domain."

    - name: Notify Telegram (VPS Ready)
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
        -d chat_id=${{ secrets.CHAT_ID }} \
        -d text="üöÄ VPS is ready via Cloudflare Tunnel with tools: git, nano, htop, pip, neofetch."

    - name: Restore backup from Telegram
      run: |
        mkdir -p /home/github/data-to-backup
        curl -s -o /tmp/data.tar.gz "https://api.telegram.org/file/bot${{ secrets.BOT_TOKEN }}/backup_path_here"
        tar -xzf /tmp/data.tar.gz -C /home/github/data-to-backup || echo "No backup found."

    - name: Run your custom commands (optional)
      run: |
        echo "üõ†Ô∏è Add your custom build, clone, or repo steps here"

    - name: Backup to Telegram before shutdown
      if: always()
      run: |
        tar -czf /tmp/data.tar.gz -C /home/github/data-to-backup .
        curl -s -F document=@/tmp/data.tar.gz "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendDocument?chat_id=${{ secrets.CHAT_ID }}&caption=üß†+VPS+Backup"

    - name: Notify Telegram (Backup Done)
      if: always()
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ secrets.BOT_TOKEN }}/sendMessage" \
        -d chat_id=${{ secrets.CHAT_ID }} \
        -d text="‚úÖ VPS session finished, and backup sent to Telegram."
